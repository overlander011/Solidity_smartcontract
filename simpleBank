pragma solidity ^0.6.0;

import 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol';
import 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol';

contract Bank is Ownable {
    
    using SafeMath for uint256;
    
    mapping (address => uint256) public balances;
    
    address[] account;
    uint256 rate = 3;
    
    //user event
    event SystemDepositeEvent(address indexed accountAddr,uint256 amount);
    event SystemWithdrowEvent(address indexed accountAddr,uint256 amount);

    //user event
    event DepositeEvent(address indexed addmin,uint256 amount);
    event WithdrowEvent(address indexed addmin,uint256 amount);
    event PayDividendEvent(address indexed addmin,uint256 totalInterest);

    
    //address public owner;
    //  constructor () public{
    //     owner = msg.sender;
    // }
    
    function deposite() public payable returns(uint256){
        if(0 ==balances[msg.sender]){
            account.push(msg.sender);
        }
        balances[msg.sender] = balances[msg.sender].add(msg.value);
        
        //broadcast deposite event
        emit DepositeEvent(msg.sender,msg.value);
        
        return balances[msg.sender];
    }
    
    function withdrow(uint256 amount) public returns(uint256 remaining) {
        require(balances[msg.sender] >= amount , "amount out of limit");
        balances[msg.sender] = balances[msg.sender].sub(amount);
        
        //tranfer ether to user ,revert on fail(check not enough)
        msg.sender.transfer(amount);
        
        //event
        emit WithdrowEvent(msg.sender,amount);
        
        //return
        remaining = balances[msg.sender];
    }
    
    //view = no update state in blockchain, no gas
    function systemBalances () public view returns(uint256 systemAmount){
        systemAmount = address(this).balance;
    }
    
    // only owner who can do this tx
    function systemWithdrow (uint256 amount)  public onlyOwner returns(uint256 ){
        //require(owner == msg.sender,"You're not owner No permission");
        require(amount <= systemBalances(), "amount out of limit");
        msg.sender.transfer(amount);
        emit WithdrowEvent(msg.sender,amount);
        return systemBalances();

    }
    
    function systemDeposite() public payable onlyOwner returns(uint){
        emit SystemDepositeEvent(msg.sender , msg.value);
        return systemBalances();
    }
    
    //cal per users ,per years
    function calculateInterest (address _users,uint _rate) private view returns(uint256) {
        uint256 interest = balances[msg.sender].mul(_rate).div(100);
        return interest;
    }
    
    function payDividendPerYear() public payable onlyOwner {
        //require(owner == msg.sender, "only owner can do");
        uint256 totalInterest = 0;
        for(uint256 i=0; i< account.length; i++){
            address account = account[i];
            uint256 interest = calculateInterest(account,rate);
            balances[msg.sender] = balances[msg.sender].add(interest);
            totalInterest = totalInterest.add(interest);
        }
        emit PayDividendEvent (msg.sender, totalInterest);
        
        require(msg.value == totalInterest,"interest not enough to pay");
    }
    
    function totalInterestPerYear() external view returns(uint256){
        uint256 totalInterest = 0;
        for(uint256 i=0; i< account.length; i++){
            address account = account[i];
            uint256 interest = calculateInterest(account,rate);
            totalInterest = totalInterest.add(interest);
        }
        return totalInterest;
        
    }
    
}
